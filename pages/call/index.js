import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useEffect, useRef, useState } from 'react'
import AgoraRTC from 'agora-rtc-sdk-ng'

let channelParameters =
{
    localAudioTrack: null,
    localVideoTrack: null,
    remoteAudioTrack: null,
    remoteVideoTrack: null,
    remoteUid: null,
};


export default function Call() {
    const [agoraEngine, setAgoraEngine] = useState();
    const [remotePlayer, setRemotePlayer] = useState();
    const localVideoRef = useRef(null);
    const remoteVideoRef = useRef(null);
    let options =
    {
        appId: 'your-app-id',
        channel: 'your-channel-name',
        appCertificate: 'your-app-certificate',
        token: 'your-token',
        uid: 'user-id',
    };
    async function startBasicCall() {
        const agoraEngine = AgoraRTC.createClient({ mode: "rtc", codec: "vp8" });
        setAgoraEngine(agoraEngine);

        agoraEngine.on("user-published", async (user, mediaType) => {
            await agoraEngine.subscribe(user, mediaType);
            if (mediaType == "video") {
                channelParameters.remoteVideoTrack = user.videoTrack;
                channelParameters.remoteAudioTrack = user.audioTrack;
                channelParameters.remoteUid = user.uid.toString();
                setRemotePlayer(user)
                channelParameters.remoteVideoTrack.play(remoteVideoRef.current);
            }
            if (mediaType == "audio") {
                channelParameters.remoteAudioTrack = user.audioTrack;
                channelParameters.remoteAudioTrack.play();
            }
            agoraEngine.on("user-unpublished", user => {
                console.log(user.uid + "has left the channel");
            });
        });
    }

    useEffect(() => {
        startBasicCall()
    }, []);

    const handleJoin = async () => {
        await agoraEngine.join(options.appId, options.channel, options.token, options.uid);
        channelParameters.localAudioTrack = await AgoraRTC.createMicrophoneAudioTrack();
        channelParameters.localVideoTrack = await AgoraRTC.createCameraVideoTrack();
        await agoraEngine.publish([channelParameters.localAudioTrack, channelParameters.localVideoTrack]);
        channelParameters.localVideoTrack.play(localVideoRef.current);
        console.log("publish success!");
        startBasicCall()
    }

    const handleLeave = async () => {
        if(channelParameters.localAudioTrack)channelParameters.localAudioTrack.close();
        if(channelParameters.remoteAudioTrack)channelParameters.remoteAudioTrack.close();
        if(channelParameters.localVideoTrack)channelParameters.localVideoTrack.close();
        if(channelParameters.remoteVideoTrack)channelParameters.remoteVideoTrack.close();
        if(remoteVideoRef.current)remoteVideoRef.current.remove()
        if(localVideoRef.current)localVideoRef.current.remove()
        await agoraEngine.leave();
        console.log("You left the channel");
    }
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${styles.main}`}>
                <button id='join' onClick={handleJoin}>Join</button>
                <button id='leave' onClick={handleLeave}>Leave</button>
                <p>Audience UID:{options.uid}</p>
                <video ref={localVideoRef} autoPlay playsInline />
                <p>Remote UID:{remotePlayer?.uid}</p>
                <video ref={remoteVideoRef} autoPlay playsInline />

            </main>
        </>
    )
}
